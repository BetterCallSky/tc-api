{
  "_id": 30048923,
  "_isComplete": true,
  "__v": 24927,
  "_lastUpdate": "2017-02-17T08:05:25.345Z",
  "appealsEndDate": "2015-03-01T04:02:00.000Z",
  "challengeCommunity": "develop",
  "challengeName": "SunShot - Solar Ags NodeJS API Development",
  "challengeType": "Assembly Competition",
  "checkpointSubmissionEndDate": null,
  "currentPhaseEndDate": "2015-02-21T14:00:00.000Z",
  "currentPhaseName": "Registration",
  "currentPhaseRemainingTime": -62791379,
  "currentStatus": "Deleted",
  "detailedRequirements": "<h1><span style=\"color:#FF0000\"><strong>Project Overview</strong></span></h1>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#333333; font-family:arial; font-size:15px\">SolarAgs application focuses on making solar energy more attractive to the average person by improving accessibility and economizing the initial &ldquo;go solar&rdquo; process. </span></p>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#333333; font-family:arial; font-size:15px\">With SolarAgs application, the user captures a photo of the house from the exterior of their home, answers a series of questions to determine goals and objective of their interest to &ldquo;go solar&rdquo; as well as economic considerations. </span></p>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#333333; font-family:arial; font-size:15px\">This data is transmitted to a back-end which uses cloud-computing methods to automate, customize, and optimize a Photovoltaics (PV) solution for the app user&rsquo;s own home. </span></p>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#333333; font-family:arial; font-size:15px\">The overall product has two parts: A front-end Android application which resides on the smartphone and a Node.js REST API back-end which is hosted in a cloud server. </span></p>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#333333; font-family:arial; font-size:15px\">The Android application is responsible for providing a functioning camera, GPS and compass data, and the entire user experience. After one or more images and data have been sent from the front-end to the back-end, the backend processes the data through a series of algorithms. </span></p>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#333333; font-family:arial; font-size:15px\">Lastly, the back-end returns one or more images and data to the smartphone app, for presentation to the user.</span></p>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#ff0000; font-family:arial; font-size:23px\">Challenge Task Overview</span></p>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#333333; font-family:arial; font-size:15px\">In this challenge we are building part of the backend - a NodeJS REST API.</span></p>\n\n<h3 dir=\"ltr\"><strong>Functionality Requirements</strong></h3>\n\n<h4 dir=\"ltr\"><u>Technology Stack</u></h4>\n\n<ol>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">The rest api application will be an </span><a href=\"http://expressjs.com/\" style=\"text-decoration:none;\"><u>express.js</u></a><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\"> web application.</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Facebook Node.js SDK can be one of the recommended ones by </span><a href=\"https://developers.facebook.com/docs/apis-and-sdks#node3p\" style=\"text-decoration:none;\"><u>facebook</u></a><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">.</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><a href=\"https://github.com/dropbox/dropbox-js\" style=\"text-decoration:none;\"><u>Dropbox Node.js Module</u></a><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\"> to interact with dropbox for photo hosting.</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><a href=\"http://www.mongodb.org/\" style=\"text-decoration:none;\"><u>MongoDB</u></a><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\"> as database and </span><a href=\"http://mongoosejs.com/\" style=\"text-decoration:none;\"><u>Mongoose ORM module</u></a><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\"> to interact with the DB - we will use latest stable version.</span></p>\n\t</li>\n</ol>\n\n<h4 dir=\"ltr\"><u>Login/Authorization endpoint</u></h4>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Users of the android application can login via Facebook or use the app as guests, in either cases, we need a token to keep tracking of submitted application by either type of users, and that requires an API endpoint to register new user.</span></p>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">For Facebook Login, the flow will be as follow : </span></p>\n\n<ol>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Login via Facebook on Android app and obtain the Facebook Access Token</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Pass the Facebook Access Token and Refresh Token to the Signup REST API endpoint with &lsquo;type&rsquo; parameter of value &lsquo;facebook&rsquo;.</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">API endpoint backend will :</span></p>\n\n\t<ol>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">check the given Facebook Access Token to make sure it is valid by making a graph call to the /me endpoint or via other functionality provided the Facebook nodejs SDK module. </span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Parse the response to get user id and email, and cross-reference this with existing users to see if it&rsquo;s a new or old one.</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Create a random token, create a new User record in DB and store the random token (api_access_token) along with the obtained user id/email/access-token/refresh-token then send the api_access_token (in addition to any other needed info) back to the android app.</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">For every call hereafter, send the api_access_token to authenticate it. If backend needed the fb_access_token for getting more info, say retrieving the list of your user&rsquo;s friends, we can do so by retrieving it from the DB.</span></p>\n\t\t</li>\n\t</ol>\n\t</li>\n</ol>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">For guest users, the flow will be like this : </span></p>\n\n<ol>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Make call to the Signup REST API endpoint with &lsquo;type&rsquo; parameter of value &lsquo;guest&rsquo;</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">API endpoint backend will : </span></p>\n\n\t<ol>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Create random token, create new User record in DB and store the random token (api_access_token) and send it back to the android app.</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">For every call hereafter, send the api_access_token to authenticate it.</span></p>\n\t\t</li>\n\t</ol>\n\t</li>\n</ol>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">The reason here we are tracking guest user so we can associate it with submitted application, and use it to lookup the processed results and send it back to the android application.</span></p>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Login endpoint : </span></p>\n\n<ol>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">endpoint signature is &lsquo;POST /login&rsquo;</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">input parameters : </span></p>\n\n\t<ol>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">facebook access token parameter (if available)</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">type parameter : support two values (&lsquo;facebook&rsquo;, &lsquo;guest&rsquo;)</span></p>\n\t\t</li>\n\t</ol>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">It accepts input parameters as json format</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">It returns output as json object</span></p>\n\t</li>\n</ol>\n\n<h4 dir=\"ltr\"><u>Authorization Middleware</u></h4>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">You also need to add a middleware to verify the api_access_token for all API calls other than /login endpoint.</span></p>\n\n<h4 dir=\"ltr\"><u>Job Object endpoints</u></h4>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">User will provide basic data about the house and upload one or more photos. The data will be stored to DropBox and processed by SolarAgs backend.</span></p>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">We need a CRUD operations to create, update, retrieve, and delete a Job (represents House Data) Object.</span></p>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Here a sequence diagram of the workflow of a Job : </span></p>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">https://drive.google.com/open?id=0B8huYiP6g3MLYUZweUp6STFYeUU&amp;authuser=0</span></p>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Provided in challenge forums a wireframe with basic explanation about the flow (PRD - SolarAgs v0.01.docx) showing the data we need to collect. Refer to it to get better understanding of what we are building.</span></p>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Notes about the endpoints : </span></p>\n\n<ol>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Set Job :</span></p>\n\n\t<ol>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Signature &lsquo;POST /Job/{id}?&rsquo;</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">{id} is optional</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">The endpoint create or update an existing Job.</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">It accepts input as &quot;multipart/form-data&quot; as this API accepts images data at the same time as a &lsquo;registration&rsquo; json object, registration attributes are :</span></p>\n\n\t\t<ol>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Name</span></p>\n\t\t\t</li>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">How much would you like to spend ? </span></p>\n\t\t\t</li>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Longitude</span></p>\n\t\t\t</li>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Latitude</span></p>\n\t\t\t</li>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Annual Electric Payment (in $)</span></p>\n\t\t\t</li>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Monthly Electric Payment ($) </span></p>\n\t\t\t</li>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">State</span></p>\n\t\t\t</li>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Cardinal Direction</span></p>\n\t\t\t</li>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Door Length (in inch)</span></p>\n\t\t\t</li>\n\t\t</ol>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">The images data are optional.</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Proper validation for input parameters must be added.</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Associate a &lsquo;status&rsquo; field with the Job record, it can be one of the following : </span></p>\n\n\t\t<ol>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Saved : indicates the record is saved to SolarArgs backend</span></p>\n\t\t\t</li>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Submitted : indicates the record are submitted to SolarAgs backend</span></p>\n\t\t\t</li>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Processed : indicates the record returned from SolarAgs backend</span></p>\n\t\t\t</li>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Completed : indicates the record processed and user completed the process of selecting the Design and Confirmed it.</span></p>\n\t\t\t</li>\n\t\t</ol>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">The endpoint will run logic depends on the status of the record : </span></p>\n\n\t\t<ol>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">If record does not exist (new), the record is stored in DB, Image is uploaded, and Status will be Submitted.</span></p>\n\t\t\t</li>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">If record status is &lsquo;Submitted&rsquo; then return error with message that record is being processed and cannot be updated.</span></p>\n\t\t\t</li>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">If record status is &lsquo;Processed&rsquo; then it is expected user will do Design review and verify the selection, </span></p>\n\n\t\t\t<ol>\n\t\t\t\t<li dir=\"ltr\">\n\t\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">The passed in parameter will be the selected result entry, it should be updated to have a flag indicates it is the &lsquo;selected&rsquo; design.</span></p>\n\t\t\t\t</li>\n\t\t\t\t<li dir=\"ltr\">\n\t\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Set Job status to &lsquo;completed&rsquo;.</span></p>\n\t\t\t\t</li>\n\t\t\t</ol>\n\t\t\t</li>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">If record status is &lsquo;Completed&rsquo; then return error with message that record completed and no further update can be done.</span></p>\n\t\t\t</li>\n\t\t</ol>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">The uploaded images will be stored in Dropbox, and reference to these images will be stored in Job record.</span></p>\n\n\t\t<ol>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Dropbox credentials should be stored in configuration, configuration will read it from environment variables.</span></p>\n\n\t\t\t<ol>\n\t\t\t\t<li dir=\"ltr\">\n\t\t\t\t<p dir=\"ltr\"><u>We are providing the Dropbox credentials in challenge forums, you will use it for testing.</u></p>\n\t\t\t\t</li>\n\t\t\t\t<li dir=\"ltr\">\n\t\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">We are also providing a sample image you can use for testing.</span></p>\n\t\t\t\t</li>\n\t\t\t</ol>\n\t\t\t</li>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Android application will show progress bar while files are being uploaded, we need to provide a progress update to frontend as done in this </span><a href=\"https://github.com/dropbox/dropbox-js/blob/stable/guides/snippets.md#progress-indicators\" style=\"text-decoration:none;\"><u>code</u></a><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\"> snippet.</span></p>\n\t\t\t</li>\n\t\t</ol>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">On successful create/update, the Job object should be returned as json object in the response.</span></p>\n\t\t</li>\n\t</ol>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Retrieve Job : </span></p>\n\n\t<ol>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Signature &lsquo;GET /Job/{id}&rsquo;</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">{id} represents the Job primary identifier</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">It returns the object if found. Otherwise, returns 404 error with friendly message.</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">On successful execution,the Job object should be returned as json object in the response.</span></p>\n\t\t</li>\n\t</ol>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Retrieve All Job :</span></p>\n\n\t<ol>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Signature &lsquo;GET /Jobs&rsquo; </span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">On successful execution, It returns array of Job objects in json format in the response. Empty array if no result found.</span></p>\n\t\t</li>\n\t</ol>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Delete Job</span></p>\n\n\t<ol>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Signature &lsquo;Delete /Job/{id}</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Verify the object exists. If not, return 404 error code with proper message.</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Delete the record from database.</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">On successful submission, returns &lsquo;Result : Success&rsquo; json in the response. </span></p>\n\t\t</li>\n\t</ol>\n\t</li>\n</ol>\n\n<h4 dir=\"ltr\"><u>SolarAgs Status Job Scheduler</u></h4>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">We need to keep - periodically - checking the status of submitted Job records results. We can build a Job Scheduler or may be easier to use &lsquo;SetInterval&rsquo; and make the interval time configurable with default value to be &lsquo;5&rsquo; minutes.</span></p>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">When result is found update Job record : </span></p>\n\n<ul>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Update Job Record to store the references to the Dropbox result images.</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Store the additional basic info in Job record as well.</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Set status to &lsquo;Processed&rsquo;</span></p>\n\t</li>\n</ul>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Note that an optimal solution would be to fire the &lsquo;setInterval&rsquo; or job scheduler only when at least one Job record is submitted.</span></p>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Implement a middleware that load all pending jobs during application startup. This is needed in case an error happened (i.e. Server crashed, App Crashed or Killed .. etc).</span></p>\n\n<h4 dir=\"ltr\"><u>Objects Definition</u></h4>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">We have two objects to maintain in database : </span></p>\n\n<ul>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">User record</span></p>\n\n\t<ul>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">ID (Primary)</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">api_access_token (required)</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">facebook_auth (optional)</span></p>\n\n\t\t<ul>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">access_token (required)</span></p>\n\t\t\t</li>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">refresh_token (required)</span></p>\n\t\t\t</li>\n\t\t</ul>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">email (optional)</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">first_name (optional)</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">last_name (optional)</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">type (required) : &lsquo;facebook&rsquo;, &lsquo;guest&rsquo;</span></p>\n\t\t</li>\n\t</ul>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Job record</span></p>\n\n\t<ul>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">ID (Primary)</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">user_id : reference User#ID</span></p>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Metadata (nullable) : </span></p>\n\n\t\t<ul>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">registration resource - data collected after taking the photos.</span></p>\n\t\t\t</li>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">dropbox-photos (optional)</span></p>\n\n\t\t\t<ul>\n\t\t\t\t<li dir=\"ltr\">\n\t\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">array of photo references to dropbox</span></p>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t</li>\n\t\t</ul>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Result (nullable)</span></p>\n\n\t\t<ul>\n\t\t\t<li dir=\"ltr\">\n\t\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Hold the returned result. This will be references to the result in dropbox and the basic information.</span></p>\n\t\t\t</li>\n\t\t</ul>\n\t\t</li>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Status (required) : &lsquo;Submitted&rsquo;, &lsquo;Processed&rsquo;, &lsquo;Completed&rsquo;</span></p>\n\t\t</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">You are welcome to improve the model structure.</span></p>\n\n<h4 dir=\"ltr\"><u>PostMan API File</u></h4>\n\n<ul>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Create postman json file listing all calls and sample data.</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Provide description for endpoints (recent postman version support endpoint descriptions)</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Get Started with Postman : </span><a href=\"http://www.getpostman.com/\" style=\"text-decoration:none;\"><u>http://www.getpostman.com/</u></a></p>\n\t</li>\n</ul>\n\n<h4 dir=\"ltr\"><u>UI Demo</u></h4>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Build a simple UI demo page to simulate the Upload progress indicator.</span></p>\n\n<h4 dir=\"ltr\"><u>Hosting</u></h4>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">The target hosting platform is Amazon EC2 AWS. OS is Latest Ubuntu LTS.</span></p>\n\n<h4 dir=\"ltr\"><u>Documentation</u></h4>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Provide a detailed README documentation for how to setup and configure the application locally and on aws.</span></p>\n\n<h4 dir=\"ltr\"><u>Configurations</u></h4>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">You are expected to use environment variables to store sensitive information and environment-specific configurations.</span><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">&nbsp;&nbsp;&nbsp; </span></p>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">For configuration, we expect routes and other sensitive config will be configured in config/config.js, we prefer if you use</span><a href=\"https://github.com/lorenwest/node-config\" style=\"text-decoration:none;\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\"> </span><u>node-config</u></a><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\"> module for that. but We will leave it up to you to use the proper approach.</span></p>\n\n<h3 dir=\"ltr\"><strong>Folder Structure and Configuration</strong></h3>\n\n<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Follow this folder structure :</span></p>\n\n<ul>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">config/ </span><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">&nbsp;&nbsp;&nbsp; </span></p>\n\n\t<ul>\n\t\t<li dir=\"ltr\">\n\t\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">config.js</span><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">&nbsp;&nbsp;&nbsp; </span></p>\n\t\t</li>\n\t</ul>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">app.js</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">controllers/</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">models/</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">services/</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">helpers/</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">README.md</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">env-sample (don&#39;t include .env in your submission)</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">.. other files if needed</span></p>\n\t</li>\n</ul>\n",
  "digitalRunPoints": 630,
  "directUrl": "https://www.topcoder.com/direct/contest/detail.action?projectId=30048923",
  "finalFixEndDate": "2015-03-02T16:02:00.000Z",
  "finalSubmissionGuidelines": "<h1 dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:trebuchet ms; font-size:21px\">Deliverable</span></h1>\n\n<ul>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">All source code files and scripts that address the above requirements.</span></p>\n\t</li>\n\t<li dir=\"ltr\">\n\t<p dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Test samples</span></p>\n\t</li>\n\t<li dir=\"ltr\"><span style=\"background-color:transparent; color:#000000; font-family:arial; font-size:15px\">Detailed readme file as outlined above.</span></li>\n</ul>\n",
  "forumId": 28242,
  "forumLink": "http://apps.topcoder.com/forums/?module=Category&categoryID=28242",
  "numberOfCheckpointSubmissions": 0,
  "numberOfCheckpointsPrizes": 0,
  "numberOfRegistrants": 2,
  "numberOfSubmissions": 0,
  "postingDate": "2015-02-19T14:00:00.000Z",
  "projectId": 8537,
  "registrationEndDate": "2015-02-21T14:00:00.000Z",
  "reliabilityBonus": 280,
  "reviewScorecardId": 30001470,
  "reviewType": "COMMUNITY",
  "screeningScorecardId": 30000412,
  "submissionEndDate": "2015-02-25T04:02:00.000Z",
  "submissions": [],
  "phases": [
    {
      "type": "Specification Submission",
      "status": "Closed",
      "scheduledStartTime": "2015-02-16T11:54:00.000Z",
      "actualStartTime": "2015-02-16T11:54:00.000Z",
      "scheduledEndTime": "2015-02-16T11:56:00.000Z",
      "actualendTime": "2015-02-16T11:56:00.000Z",
      "_id": "58a6aec55d036c0bbdd5f052"
    },
    {
      "type": "Specification Review",
      "status": "Closed",
      "scheduledStartTime": "2015-02-16T11:56:00.000Z",
      "actualStartTime": "2015-02-16T11:56:00.000Z",
      "scheduledEndTime": "2015-02-16T13:54:00.000Z",
      "actualendTime": "2015-02-16T13:54:00.000Z",
      "_id": "58a6aec55d036c0bbdd5f051"
    },
    {
      "type": "Registration",
      "status": "Open",
      "scheduledStartTime": "2015-02-19T14:00:00.000Z",
      "actualStartTime": "2015-02-19T14:00:00.000Z",
      "scheduledEndTime": "2015-02-21T14:00:00.000Z",
      "actualendTime": null,
      "_id": "58a6aec55d036c0bbdd5f050"
    },
    {
      "type": "Submission",
      "status": "Open",
      "scheduledStartTime": "2015-02-19T14:07:00.000Z",
      "actualStartTime": "2015-02-19T14:07:00.000Z",
      "scheduledEndTime": "2015-02-25T04:02:00.000Z",
      "actualendTime": null,
      "_id": "58a6aec55d036c0bbdd5f04f"
    },
    {
      "type": "Screening",
      "status": "Scheduled",
      "scheduledStartTime": "2015-02-25T04:02:00.000Z",
      "actualStartTime": null,
      "scheduledEndTime": "2015-02-25T16:02:00.000Z",
      "actualendTime": null,
      "_id": "58a6aec55d036c0bbdd5f04e"
    },
    {
      "type": "Review",
      "status": "Scheduled",
      "scheduledStartTime": "2015-02-25T16:02:00.000Z",
      "actualStartTime": null,
      "scheduledEndTime": "2015-02-27T16:02:00.000Z",
      "actualendTime": null,
      "_id": "58a6aec55d036c0bbdd5f04d"
    },
    {
      "type": "Appeals",
      "status": "Scheduled",
      "scheduledStartTime": "2015-02-27T16:02:00.000Z",
      "actualStartTime": null,
      "scheduledEndTime": "2015-02-28T16:02:00.000Z",
      "actualendTime": null,
      "_id": "58a6aec55d036c0bbdd5f04c"
    },
    {
      "type": "Appeals Response",
      "status": "Scheduled",
      "scheduledStartTime": "2015-02-28T16:02:00.000Z",
      "actualStartTime": null,
      "scheduledEndTime": "2015-03-01T04:02:00.000Z",
      "actualendTime": null,
      "_id": "58a6aec55d036c0bbdd5f04b"
    },
    {
      "type": "Aggregation",
      "status": "Scheduled",
      "scheduledStartTime": "2015-03-01T04:02:00.000Z",
      "actualStartTime": null,
      "scheduledEndTime": "2015-03-01T16:02:00.000Z",
      "actualendTime": null,
      "_id": "58a6aec55d036c0bbdd5f04a"
    },
    {
      "type": "Final Fix",
      "status": "Scheduled",
      "scheduledStartTime": "2015-03-01T16:02:00.000Z",
      "actualStartTime": null,
      "scheduledEndTime": "2015-03-02T16:02:00.000Z",
      "actualendTime": null,
      "_id": "58a6aec55d036c0bbdd5f049"
    },
    {
      "type": "Final Review",
      "status": "Scheduled",
      "scheduledStartTime": "2015-03-02T16:02:00.000Z",
      "actualStartTime": null,
      "scheduledEndTime": "2015-03-03T04:02:00.000Z",
      "actualendTime": null,
      "_id": "58a6aec55d036c0bbdd5f048"
    },
    {
      "type": "Approval",
      "status": "Scheduled",
      "scheduledStartTime": "2015-03-03T04:02:00.000Z",
      "actualStartTime": null,
      "scheduledEndTime": "2015-03-08T04:02:00.000Z",
      "actualendTime": null,
      "_id": "58a6aec55d036c0bbdd5f047"
    }
  ],
  "registrants": [
    {
      "handle": "panoptimum",
      "reliability": "13%",
      "registrationDate": "2015-02-19T14:08:00.000Z",
      "submissionDate": null,
      "rating": "1333",
      "colorStyle": "color: #6666FF",
      "_id": "58a6aec55d036c0bbdd5f046"
    },
    {
      "handle": "Sky_",
      "reliability": "93%",
      "registrationDate": "2015-02-19T15:18:00.000Z",
      "submissionDate": null,
      "rating": "2227",
      "colorStyle": "color: #EE0000",
      "_id": "58a6aec55d036c0bbdd5f045"
    }
  ],
  "event": {
    "id": 3442,
    "description": "2015 topcoder Open",
    "shortDescription": "tco15"
  },
  "prize": [
    1400,
    700
  ],
  "technology": [
    "API",
    "Express",
    "HTML",
    "MongoDB",
    "Node.js",
    "REST"
  ],
  "platforms": [
    "Other"
  ]
}