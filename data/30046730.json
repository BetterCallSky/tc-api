{
  "_id": 30046730,
  "_isComplete": true,
  "__v": 1,
  "_lastUpdate": "2016-10-28T09:54:34.104Z",
  "appealsEndDate": "2014-10-27T11:47:00.000Z",
  "challengeCommunity": "develop",
  "challengeName": "WCS - Enhance RESTful server to serve a Web Application",
  "challengeType": "First2Finish",
  "checkpointSubmissionEndDate": null,
  "currentPhaseEndDate": "2014-11-23T21:01:00.000Z",
  "currentPhaseName": "Registration",
  "currentPhaseRemainingTime": -60875534,
  "currentStatus": "Completed",
  "detailedRequirements": "<h2><strong>Project Overview</strong><br />\n&nbsp;</h2>\n\n<p>We are building a web based application that allows Construction Project Managers to track tasks and the number of hours spent on each task, their costs, materials and equipment.<br />\nCurrently, they are using a legacy Powerbuilder application along with emails and spreadsheets to track their progress. With this project, we are seeking to modernize this by building a HTML5 based application.</p>\n\n<h2><strong>Challenge Overview</strong><br />\n&nbsp;</h2>\n\n<p>We have reached the stage where our database is set up and we have a RESTful API interface to interact with this database. We now seek to extend this to also serve the web application. We already have a prototype for the web application but you can ignore it in this challenge. Keeping the existing RESTful API instance intact, extend the server to also serve web pages and introduce user authentication and session management.</p>\n\n<h2><strong>Challenge Details</strong><br />\n&nbsp;</h2>\n\n<p>After registration you will be provided with the existing Node.js application that exposes RESTful APIs which interact with a SQL 2008 database. Install this application using the deployment guide and set up your development environment. Note that the application needs Windows 7 with .NET 4.5.2 or greater. because there are some edge.js wrapper functions which call Windows services.</p>\n\n<p>Once you are ready, you need to extend the same application to serve web pages using Expressjs. Include the following features:</p>\n\n<p><u>Create a HTTPS server for a simple web application</u><br />\n<br />\n- Using Expressjs create a HTTPS web server. The server should be able to handle HTML, JS, CSS and other static files. Templating on the server side is not required. The front end will be built using AngularJS so prepare the application to serve AngularJS partials.<br />\n<br />\n- Create a simple user interface to demonstrate the same. Please create a user interface in AngularJS with at least two routes that serve partials.&nbsp;Please allow an option to run as HTTPS or HTTP and point out how to set one or the other.</p>\n\n<p>&nbsp;</p>\n\n<p><u>User authentication with roles</u><br />\n<br />\n- Authentication will take place is two parts. First there will be a general pass/fail based Windows AD authentication. This simply returns a pass/fail to authenticate the user against the company&rsquo;s Active Directory. Once successful, there is an application level authentication where the user is authenticated against the application&rsquo;s specific user and permissions tables in the application database.<br />\n<br />\n- The AD authentication will use an edge.js function, which has not yet been developed and is outside of the scope of this challenge.<br />\n<br />\n- For the AD authentication, create routes and controllers that will eventually use a service that does this - make the assumption that such a service exists and you simply need to provide routes and controllers that call this service. Clearly document where in your code it is expected to call the service. For the current challenge, let your controller (that calls the service) always indicate that the user authentication is a success.<br />\n<br />\n- For the application specific authentication, there are two roles possible for a user. Admin and Superintendent (essentially &ldquo;non-Admin&rdquo;).<br />\n<br />\n- No registration of users required. In the application that will be deployed to production, we will manually add Admin users to the database. These Admin users will be able to assign users (with role superintendent) to projects.<br />\n<br />\n- We have two tables in the database for tracking this - a WebCSUsers table and WebCSProjectPermissions table. The WebCSUsers table contains usernames and their roles. The WebCSProjectPermissions table will contain projects and users assigned to that project.<br />\n<br />\n- Admin users will already exist in the WebCSUsers table. Initially, only admin users will be able to log in. Admin users are able to see all projects in the system.<br />\n<br />\n- Once Admin users log in, they can assign users to projects. When an Admin user adds a user to a project, the user is added to the WebCSUsers table (if the user does not exist already) with the role &ldquo;superIntendent&rdquo;. Finally, the user and the project are added to the WebCSProjectPermissions table.<br />\n<br />\n- When this user (the user added by Admin above) logs in, the user sees only those projects which they are assigned to.&nbsp;<br />\n<br />\n- Improve the existing route to fetch projects and schedules based on the role of the user requesting it. Introduce middleware that verifies that user has logged in and verifies the role of the user to access certain routers. Create new routes and controllers to add users to the WebCSUsers table and user permissions to the WebCSProjectPermissions table.<br />\n<br />\n- Note that the application already contains general CRUD routes for all tables. Feel free to reuse them.</p>\n\n<p>&nbsp;</p>\n\n<p><u>Session Management</u><br />\n<br />\n- Use Expressjs&rsquo;s session management feature (express.session()) to remember user sessions. We have not finalized the database to persist the user sessions and thus use Expressjs&rsquo;s default in memory session storage. Use secure cookies. Set the session to never expire.&nbsp;<br />\n<br />\n- Note that the existing application is already an Expressjs server but only contains routes to access the API. You need to extend this to complete the above.</p>\n\n<p>&nbsp;</p>\n\n<h2><strong>General</strong><br />\n&nbsp;</h2>\n\n<p>Please keep the existing code intact. Follow the same conventions used in the existing application. We believe that you need only to add additional code to complete the above. However, if you believe that an existing code needs to be modified (changed or removed) please clarify in the forums before proceeding.<br />\n<br />\nDon&rsquo;t fret over the user interface. The focus of this challenge should be on the backend. A simple user interface that demonstrates ability to login, allowing only admin users to add new superintendent users and ability to change / update project permissions is all that is needed.&nbsp;Create it in AngularJS to demonstrate the capability of your server to load partials. Organize your directory structure appropriately.</p>\n\n<h2><strong>Materials Provided</strong><br />\n&nbsp;</h2>\n\n<p>- Existing Node.js application that exposes RESTful APIs to interact with the SQL 2008 server<br />\n<br />\n- A copy of the MS SQL 2008 database with &ldquo;clean&rdquo; testing data<br />\n<br />\n- The Web Application prototype. You can ignore it for this challenge but it is advised to check it out to get a gist of the features of the application<br />\n<br />\n- Additional details of user permissions and authentication database tables</p>\n",
  "digitalRunPoints": null,
  "directUrl": "https://www.topcoder.com/direct/contest/detail.action?projectId=30046730",
  "finalSubmissionGuidelines": "<h2><strong>Submission Deliverables</strong><br />\n&nbsp;</h2>\n\n<p>- Extended node.js codebase implimenting all features described above.</p>\n\n<h2><strong>Code Aesthetics</strong><br />\n&nbsp;</h2>\n\n<p>- Code must be clean (no non-applicable comments, unused variables etc), tidy (consistent indents) and well commented<br />\n<br />\n<span>- Clear and purposeful naming for variables, classes etc.</span></p>\n",
  "forumId": 26290,
  "forumLink": "http://apps.topcoder.com/forums/?module=Category&categoryID=26290",
  "numberOfCheckpointSubmissions": 0,
  "numberOfCheckpointsPrizes": 0,
  "numberOfRegistrants": 14,
  "numberOfSubmissions": 2,
  "phases": [
    {
      "type": "Registration",
      "status": "Open",
      "scheduledStartTime": "2014-10-24T21:01:00.000Z",
      "actualStartTime": "2014-10-24T21:01:00.000Z",
      "scheduledEndTime": "2014-11-23T21:01:00.000Z",
      "actualendTime": null,
      "_id": "5813205a550dfb3b52b2b5f1"
    },
    {
      "type": "Iterative Review",
      "status": "Closed",
      "scheduledStartTime": "2014-10-26T07:08:00.000Z",
      "actualStartTime": "2014-10-26T07:08:00.000Z",
      "scheduledEndTime": "2014-10-27T09:37:00.000Z",
      "actualendTime": "2014-10-27T09:37:00.000Z",
      "_id": "5813205a550dfb3b52b2b5f0"
    },
    {
      "type": "Submission",
      "status": "Open",
      "scheduledStartTime": "2014-10-24T21:06:00.000Z",
      "actualStartTime": "2014-10-24T21:06:00.000Z",
      "scheduledEndTime": "2014-11-23T21:06:00.000Z",
      "actualendTime": null,
      "_id": "5813205a550dfb3b52b2b5ef"
    },
    {
      "type": "Iterative Review",
      "status": "Closed",
      "scheduledStartTime": "2014-10-27T11:00:00.000Z",
      "actualStartTime": "2014-10-27T11:00:00.000Z",
      "scheduledEndTime": "2014-10-27T11:47:00.000Z",
      "actualendTime": "2014-10-27T11:47:00.000Z",
      "_id": "5813205a550dfb3b52b2b5ee"
    }
  ],
  "platforms": [
    "NodeJS"
  ],
  "postingDate": "2014-10-24T21:01:00.000Z",
  "prize": [
    300
  ],
  "projectId": 7143,
  "registrants": [
    {
      "handle": "vvvpig",
      "reliability": "n/a",
      "registrationDate": "2014-10-24T22:02:00.000Z",
      "submissionDate": "2014-10-27T10:58:00.000Z",
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "5813205a550dfb3b52b2b5ed"
    },
    {
      "handle": "bonton",
      "reliability": "n/a",
      "registrationDate": "2014-10-25T05:33:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "5813205a550dfb3b52b2b5ec"
    },
    {
      "handle": "sunbinbrother",
      "reliability": "n/a",
      "registrationDate": "2014-10-25T06:17:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "5813205a550dfb3b52b2b5eb"
    },
    {
      "handle": "smart_raghavan",
      "reliability": "n/a",
      "registrationDate": "2014-10-25T09:45:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "5813205a550dfb3b52b2b5ea"
    },
    {
      "handle": "kazka",
      "reliability": "n/a",
      "registrationDate": "2014-10-25T19:54:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "5813205a550dfb3b52b2b5e9"
    },
    {
      "handle": "niro56",
      "reliability": "n/a",
      "registrationDate": "2014-10-25T20:38:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "5813205a550dfb3b52b2b5e8"
    },
    {
      "handle": "mulish",
      "reliability": "n/a",
      "registrationDate": "2014-10-26T04:00:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "5813205a550dfb3b52b2b5e7"
    },
    {
      "handle": "kaiGG",
      "reliability": "n/a",
      "registrationDate": "2014-10-26T05:49:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "5813205a550dfb3b52b2b5e6"
    },
    {
      "handle": "Rushikesh.Deshp",
      "reliability": "n/a",
      "registrationDate": "2014-10-26T06:20:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "5813205a550dfb3b52b2b5e5"
    },
    {
      "handle": "wsobolewski",
      "reliability": "n/a",
      "registrationDate": "2014-10-26T07:23:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "5813205a550dfb3b52b2b5e4"
    },
    {
      "handle": "aakinola",
      "reliability": "n/a",
      "registrationDate": "2014-10-26T09:30:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "5813205a550dfb3b52b2b5e3"
    },
    {
      "handle": "govi.rathore",
      "reliability": "n/a",
      "registrationDate": "2014-10-27T06:22:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "5813205a550dfb3b52b2b5e2"
    },
    {
      "handle": "fvetsper",
      "reliability": "n/a",
      "registrationDate": "2014-10-27T08:30:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "5813205a550dfb3b52b2b5e1"
    },
    {
      "handle": "dombits",
      "reliability": "n/a",
      "registrationDate": "2014-10-27T11:38:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "5813205a550dfb3b52b2b5e0"
    }
  ],
  "registrationEndDate": "2014-11-23T21:01:00.000Z",
  "reviewScorecardId": 30001600,
  "reviewType": "COMMUNITY",
  "screeningScorecardId": null,
  "submissionEndDate": "2014-11-23T21:06:00.000Z",
  "submissions": [
    {
      "handle": "vvvpig",
      "placement": 1,
      "screeningScore": null,
      "initialScore": 0,
      "finalScore": 0,
      "points": 0,
      "submissionStatus": "Failed Review",
      "submissionDate": "2014-10-26T07:07:00.000Z",
      "_id": "5813205a550dfb3b52b2b5f3"
    },
    {
      "handle": "vvvpig",
      "placement": 1,
      "screeningScore": null,
      "initialScore": 100,
      "finalScore": 100,
      "points": 0,
      "submissionStatus": "Active",
      "submissionDate": "2014-10-27T10:58:00.000Z",
      "_id": "5813205a550dfb3b52b2b5f2"
    }
  ],
  "technology": [
    "Angular.js",
    "HTML",
    "HTML5",
    "IIS",
    "SQL Server"
  ]
}