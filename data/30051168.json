{
  "_id": 30051168,
  "_isComplete": true,
  "__v": 0,
  "_lastUpdate": "2016-10-27T17:49:00.611Z",
  "appealsEndDate": "2015-11-26T18:47:00.000Z",
  "challengeCommunity": "develop",
  "challengeName": "Watson Pattern Explorer Node RED Flow",
  "challengeType": "Code",
  "checkpointSubmissionEndDate": null,
  "currentPhaseEndDate": null,
  "currentPhaseName": "Stalled",
  "currentPhaseRemainingTime": 0,
  "currentStatus": "Completed",
  "detailedRequirements": "<h1><a name=\"_Toc10301853\"></a><a name=\"_Toc456598592\">Watson Pattern Explorer Node RED Flow</a> Contest Specification</h1>\n\n<h1><a name=\"_Toc456598593\">1.&nbsp;&nbsp;&nbsp;&nbsp; Project Overview</a></h1>\n\n<h2>1.1&nbsp;&nbsp;&nbsp;&nbsp; System Description</h2>\n\n<p style=\"margin-left:.5in\">The goal is to produce a proof of concept pattern explorer application using Node RED technology. The application should take in data from the Watson Engagement Advisor Instance, run it through a series of processing steps and provide access to the processed data.</p>\n\n<h2>1.2&nbsp;&nbsp;&nbsp;&nbsp; Competition Task Overview</h2>\n\n<h3>1.2.1&nbsp;&nbsp;&nbsp;&nbsp; NLC node</h3>\n\n<p>Develop a custom node that will handle comunication to an instance of Natural Language Classifier (NLC) service.<br />\n&nbsp;https://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/nl-classifier/<br />\nThe node should be able to train the classifier using the provided data (csv file), query the trained classifier,delete and list all classifiers. Use the NLC REST api to implement the functionalities - http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/apis/#!/natural-language-classifier</p>\n\n<h3>1.2.2 &nbsp; &nbsp; Custom flow</h3>\n\n<p>Develop a custom flow of a simple data processing pipeline.&nbsp;<span>It should consist of the following:</span></p>\n\n<ul>\n\t<li>Exposed http endpoint for triggering the flow</li>\n\t<li>Parsing input parameters</li>\n\t<li>Training the language classifier</li>\n\t<li>Testing the classifier</li>\n\t<li>Persisting the processing results</li>\n\t<li>Sending processing status updates</li>\n</ul>\n\n<p>The endpoint should require the following parameters:</p>\n\n<ul>\n\t<li>jobID - the id of the processing job that will be used for identifying this particular job</li>\n\t<li>dataset to use for training and testing the nlc node</li>\n\t<li>email address - to send results and status updates to</li>\n</ul>\n\n<p>Save the jobID and email address in the global context so it will be available later for persisting the results and logging.</p>\n\n<p>Split the dataset into train and test questions. Use the train questions to train a language classifier instance. A function node can be used for splitting the dataset.</p>\n\n<p>In a loop check if the training is complete. When it is done, test the classifier with the test questions and report test accuracy as job result. Include the list of misclassified questions in the results.</p>\n\n<p>Input dataset will be in the following format</p>\n\n<p><em>{</em></p>\n\n<p><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &#39;questions&#39;:</em></p>\n\n<p><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [</em></p>\n\n<p><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</em></p>\n\n<p><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &#39;text&#39;: String</em></p>\n\n<p><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &#39;class&#39;: String</em></p>\n\n<p><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</em></p>\n\n<p><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ]</em></p>\n\n<p><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</em></p>\n\n<h3>1.2.3 &nbsp; &nbsp; Deliver the processing results</h3>\n\n<p>Develop a custom flow to deliver the results of the processing. Build this functionality as a subflow so we can reuse it to persist results after any of the processing steps. The results should be delivered as an email message. To process emails, use the SendGrid service available in Bluemix.</p>\n\n<p>Additionaly, persist the processing results in a cloudant database.&nbsp;<span>Create a new database object for persistence (jobResult or similar), and use the jobID from the global context to link it with the job request. This should be optional, ie the user should be able to choose to just deliver results by email and skip database.</span></p>\n\n<p><span>The email with the final results should contain the following:</span></p>\n\n<p><span>Overall accuracy</span></p>\n\n<p>Classification matrix -&nbsp;class of truth on columns and class of prediction on rows, with count in cells.</p>\n\n<p><span>List of first 20 misclassified questions</span></p>\n\n<p><span>List of 3 most and least accurate question classes</span></p>\n\n<h3>1.2.4 &nbsp; &nbsp; Send processing status updates</h3>\n\n<p>Add a status node in the flow to catch node status updates. Send these as a notification to the email address available in the global context.</p>\n\n<h3>1.2.5 &nbsp; &nbsp; Error handling</h3>\n\n<p>Create a catch node in the flow to handle possible errors. Update the processing status to &ldquo;Failed&rdquo; if the error is fatal (breaks the flow), otherwise just log the error.</p>\n\n<p>&nbsp;</p>\n\n<h2><a name=\"_Toc10301854\"></a><a name=\"_Toc10301867\">1.4&nbsp;&nbsp;&nbsp;&nbsp; Verification</a></h2>\n\n<p>For verification, trigger the flow and verify that the flow produces the required email messages and database changes. Make sure to verify the failure scenario too. You can use the sample NLC data for testing the classifier</p>\n\n<p>https://github.com/watson-developer-cloud/natural-language-classifier-nodejs/blob/master/training/weather_data_train.csv</p>\n\n<h2>1.5&nbsp;&nbsp;&nbsp;&nbsp; Technology overview</h2>\n\n<ul>\n\t<li><a name=\"_Toc264791785\"></a><a name=\"_Toc253168776\"></a><a name=\"_Toc247023653\">Nodejs </a><a href=\"https://nodejs.org/\">https://nodejs.org</a></li>\n\t<li>Node RED <a href=\"http://nodered.org/\">http://nodered.org</a></li>\n\t<li>Cloudant <a href=\"https://cloudant.com/\">https://cloudant.com</a></li>\n\t<li>cf-cloudant <a href=\"http://flows.nodered.org/node/node-red-node-cf-cloudant\">http://flows.nodered.org/node/node-red-node-cf-cloudant</a></li>\n</ul>\n\n<h2>&nbsp;</h2>\n",
  "digitalRunPoints": null,
  "directUrl": "https://www.topcoder.com/direct/contest/detail.action?projectId=30051168",
  "finalSubmissionGuidelines": "<p>Submit a zip file with all the deliverables.</p>\n",
  "forumId": 30295,
  "forumLink": "http://apps.topcoder.com/forums/?module=Category&categoryID=30295",
  "numberOfCheckpointSubmissions": 0,
  "numberOfCheckpointsPrizes": 0,
  "numberOfRegistrants": 16,
  "numberOfSubmissions": 2,
  "postingDate": "2015-11-18T14:01:00.000Z",
  "projectId": 9068,
  "registrationEndDate": "2015-11-22T13:00:00.000Z",
  "reviewScorecardId": 30001884,
  "reviewType": "COMMUNITY",
  "screeningScorecardId": null,
  "submissionEndDate": "2015-11-22T13:01:00.000Z",
  "submissions": [
    {
      "handle": "vvvpig",
      "placement": 1,
      "screeningScore": null,
      "initialScore": 95.56,
      "finalScore": 97.04,
      "points": 0,
      "submissionStatus": "Active",
      "submissionDate": "2015-11-22T04:28:00.000Z",
      "_id": "58123e0c0659262e95e00b4a"
    },
    {
      "handle": "GeetaMamuni",
      "placement": 2,
      "screeningScore": null,
      "initialScore": 91.61,
      "finalScore": 94.57,
      "points": 0,
      "submissionStatus": "Completed Without Win",
      "submissionDate": "2015-11-22T12:40:00.000Z",
      "_id": "58123e0c0659262e95e00b49"
    }
  ],
  "phases": [
    {
      "type": "Registration",
      "status": "Closed",
      "scheduledStartTime": "2015-11-18T14:01:00.000Z",
      "actualStartTime": "2015-11-18T14:01:00.000Z",
      "scheduledEndTime": "2015-11-22T13:00:00.000Z",
      "actualendTime": "2015-11-22T13:00:00.000Z",
      "_id": "58123e0c0659262e95e00b48"
    },
    {
      "type": "Submission",
      "status": "Closed",
      "scheduledStartTime": "2015-11-18T14:06:00.000Z",
      "actualStartTime": "2015-11-18T14:06:00.000Z",
      "scheduledEndTime": "2015-11-22T13:01:00.000Z",
      "actualendTime": "2015-11-22T13:01:00.000Z",
      "_id": "58123e0c0659262e95e00b47"
    },
    {
      "type": "Review",
      "status": "Closed",
      "scheduledStartTime": "2015-11-22T13:01:00.000Z",
      "actualStartTime": "2015-11-22T13:01:00.000Z",
      "scheduledEndTime": "2015-11-25T06:38:00.000Z",
      "actualendTime": "2015-11-25T06:38:00.000Z",
      "_id": "58123e0c0659262e95e00b46"
    },
    {
      "type": "Appeals",
      "status": "Closed",
      "scheduledStartTime": "2015-11-25T06:38:00.000Z",
      "actualStartTime": "2015-11-25T06:38:00.000Z",
      "scheduledEndTime": "2015-11-26T06:38:00.000Z",
      "actualendTime": "2015-11-26T06:38:00.000Z",
      "_id": "58123e0c0659262e95e00b45"
    },
    {
      "type": "Appeals Response",
      "status": "Closed",
      "scheduledStartTime": "2015-11-26T06:38:00.000Z",
      "actualStartTime": "2015-11-26T06:38:00.000Z",
      "scheduledEndTime": "2015-11-26T18:47:00.000Z",
      "actualendTime": "2015-11-26T18:47:00.000Z",
      "_id": "58123e0c0659262e95e00b44"
    }
  ],
  "registrants": [
    {
      "handle": "Sky_",
      "reliability": "n/a",
      "registrationDate": "2015-11-18T14:13:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58123e0c0659262e95e00b43"
    },
    {
      "handle": "spanhawk",
      "reliability": "n/a",
      "registrationDate": "2015-11-18T14:36:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58123e0c0659262e95e00b42"
    },
    {
      "handle": "GeetaMamuni",
      "reliability": "n/a",
      "registrationDate": "2015-11-18T14:42:00.000Z",
      "submissionDate": "2015-11-22T12:40:00.000Z",
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58123e0c0659262e95e00b41"
    },
    {
      "handle": "codingdrone",
      "reliability": "n/a",
      "registrationDate": "2015-11-18T14:47:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58123e0c0659262e95e00b40"
    },
    {
      "handle": "phead",
      "reliability": "n/a",
      "registrationDate": "2015-11-18T14:54:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58123e0c0659262e95e00b3f"
    },
    {
      "handle": "zaixiang",
      "reliability": "n/a",
      "registrationDate": "2015-11-19T01:27:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58123e0c0659262e95e00b3e"
    },
    {
      "handle": "blu3fox",
      "reliability": "n/a",
      "registrationDate": "2015-11-19T08:36:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58123e0c0659262e95e00b3d"
    },
    {
      "handle": "pfilippi",
      "reliability": "n/a",
      "registrationDate": "2015-11-19T11:34:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58123e0c0659262e95e00b3c"
    },
    {
      "handle": "fish00",
      "reliability": "n/a",
      "registrationDate": "2015-11-19T19:58:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58123e0c0659262e95e00b3b"
    },
    {
      "handle": "kondakovdmitry",
      "reliability": "n/a",
      "registrationDate": "2015-11-19T21:55:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58123e0c0659262e95e00b3a"
    },
    {
      "handle": "vvvpig",
      "reliability": "n/a",
      "registrationDate": "2015-11-20T01:20:00.000Z",
      "submissionDate": "2015-11-22T04:28:00.000Z",
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58123e0c0659262e95e00b39"
    },
    {
      "handle": "lanchongyizu",
      "reliability": "n/a",
      "registrationDate": "2015-11-20T10:18:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58123e0c0659262e95e00b38"
    },
    {
      "handle": "wcheung",
      "reliability": "n/a",
      "registrationDate": "2015-11-20T15:21:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58123e0c0659262e95e00b37"
    },
    {
      "handle": "sunbinbrother",
      "reliability": "n/a",
      "registrationDate": "2015-11-21T00:18:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58123e0c0659262e95e00b36"
    },
    {
      "handle": "testXuSanping",
      "reliability": "n/a",
      "registrationDate": "2015-11-21T13:42:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58123e0c0659262e95e00b35"
    },
    {
      "handle": "linuxgeek",
      "reliability": "n/a",
      "registrationDate": "2015-11-22T12:14:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58123e0c0659262e95e00b34"
    }
  ],
  "event": {
    "id": 3446,
    "description": "2016 TopCoder(R) Open",
    "shortDescription": "tco16"
  },
  "prize": [
    1500,
    750
  ],
  "technology": [
    "Node.js"
  ],
  "platforms": [
    "NodeJS",
    "IBM Bluemix"
  ]
}