{
  "_id": 30051529,
  "_isComplete": true,
  "__v": 1,
  "_lastUpdate": "2016-10-28T10:32:19.781Z",
  "appealsEndDate": "2015-11-12T18:31:00.000Z",
  "challengeCommunity": "develop",
  "challengeName": "Harbison Fischer Pump Tracker UI HTML 5 Prototype Challenge",
  "challengeType": "UI Prototype Competition",
  "checkpointSubmissionEndDate": null,
  "currentPhaseEndDate": null,
  "currentPhaseName": "Stalled",
  "currentPhaseRemainingTime": 0,
  "currentStatus": "Completed",
  "detailedRequirements": "<p>Welcome to <strong>Harbison Fischer Pump Tracker UI Prototype Challenge</strong></p>\n\n<p>Harbison Fischer is a global company that manufactures and sells pumping equipment for oil wells. While they do not repair any pumps themselves, they do work with Pump Shops who do the actual repairs on the equipment for their Customers. Harbison Fisher is looking to create an application to help the Pump Shops manage and track the pumps that come to them for repairs. They are looking for a user friendly, clean and simple application that the Pump Shops can use to manage the Pump Equipment and Create and Manage Pump Repairs.</p>\n\n<p>The main task of this challenge is to create the Harbison Fischer Desktop Responsive UI Prototype based on the provided wireframe basic layout and function. You also need re-use and follow client standard for JSON data.</p>\n\n<p>On this challenge, we need you focus to create prototype that will fully work within DESKTOP platform only. In the end of this challenge we need solid UI prototype result with best practice solution, that can be updated easily in the future challenges when improved the codes to support Tablet and Mobile version and update all page skinning.</p>\n",
  "digitalRunPoints": null,
  "directUrl": "https://www.topcoder.com/direct/contest/detail.action?projectId=30051529",
  "event": {
    "id": 3446,
    "description": "2016 TopCoder(R) Open",
    "shortDescription": "tco16"
  },
  "finalFixEndDate": "2015-11-15T17:18:00.000Z",
  "finalSubmissionGuidelines": "<p><strong>Documentation Provided</strong><br />\nwires_FF_v7.zip - Wireframe Layout as Guideline to your prototype</p>\n\n<p><strong>General Notes</strong><br />\n- We have not provided storyboard design in PSD/AI format like common UI Prototype format. For this challenge you need build the layout based on wireframe layout.<br />\n- All pages of UI Prototype must support responsive design solution, for this challenge you just support desktop screen<br />\n- Set 992px as UI Prototype max width and placed centered of browser screen<br />\n- Our main priority in this challenge is we need make sure all functions works properly.<br />\n- Base of prototype need created using <a href=\"http://getbootstrap.com/\">Bootstrap</a> layout.<br />\n- All form element as possible need to use browser based style OR from bootstrap style<br />\n- Re-create all icons in your prototype based on <a href=\"http://glyphicons.bootstrapcheatsheets.com\">Bootstrap Icons</a><br />\n- Create interaction/functions by using <a href=\"http://getbootstrap.com/\">Bootstrap component</a> and <a href=\"http://getbootstrap.com/javascript/\">Bootstrap Javascript</a><br />\n- Use JSON to load all data (refer to further details in later sections)<br />\n- This app will load data (JSON) asynchronously once put into production.&nbsp; For this challenge, local json files should be used.&nbsp; We have provided example JSON files that contain dummy data in the challenge attachments.<br />\n- All text inside every pages need to be editable<br />\n- Please use your best judgement about layout and functions. Let us know if you need clarification about via challenge forum.<br />\n- ALL hard-coded text from design should be configurable in a single section in the javascript (this JS should be inline in the HTML file)<br />\n- The use of <strong>AngularJS</strong> is preferred by not required.<br />\n<br />\n<strong>UI PROTOTYPE PAGE REQUIREMENTS:</strong><br />\nNote: Always refer to wires_FF_v7.zip for visual guidelines</p>\n\n<p><strong>1). Pumps</strong><br />\n- All main navigations tabs will build as separated pages, no need linked to each other.<br />\n- There are buttons/links for Recently Viewed, Recently Created and Recently Modified.&nbsp; There is also a Search button (the one in the expanded search menu).&nbsp; All of these (and pageLoad) should call the retrievePumps method with various parameter differences.&nbsp; This method returns a JSON object with two properties:<br />\n&nbsp;&nbsp;&nbsp; -- pumpsCount : Integer - the number of pumps returned by search<br />\n&nbsp;&nbsp;&nbsp; -- pumps : [] - array of Pump objects<br />\nuse the data in the pumps property to populate the prototype with data.&nbsp; The pumpsCount can be used with the pageSize parameter to enable pagination<br />\n- In the right side there&rsquo;s View Option button to toggle between List view and Grid view<br />\n- Add Pump button displays &ldquo;Add Pump&rdquo;.&nbsp; When clicked the user should be taken to the Add Pump screen</p>\n\n<p><strong>List View of files</strong><br />\n- Users can toggle between List view and Grid view using button<br />\n- Use Bootstrap Icons for List view and Grid view button<br />\n- Your prototype need use cookies to remember Grid and List view last state<br />\n- List View show up by default (if cookie does not exist)<br />\n- There&rsquo;s colorful rectangle in the first column that are reflected to &ldquo;Status&rdquo; column<br />\n- On List view, clicking on a column sorts the table by that column.<br />\n&nbsp;&nbsp;&nbsp; -- This would require calling retrievePumps method again with different sortDescending parameter value.<br />\n- Display correct up/down arrow when user sort the table<br />\n- Clicking on table row should navigate to &ldquo;Pumps Details&rdquo; screen<br />\n- Customer cell should be a link to &ldquo;/{{pump.customerId}}&rdquo; (within current window)<br />\n- Page numbering should be calculated using the pumpsCount, pageSize, and pageNumber parameters.<br />\n<br />\n<strong>Grid View</strong><br />\n- This is Grid View look and feel<br />\n- Sections divided by each Customer<br />\n- User can sliding each customer row by click Next and Prev arrow<br />\n- When reach the first slide, previous arrow need to be disabled<br />\n- When reach the last slide, next arrow need to be disabled<br />\n- For Grid view, each box need show Status with rectangle shape on top of box<br />\n- Then another rows for another information<br />\n- Clicking on Pump number title displays the &ldquo;B). Pumps Details&rdquo; screen<br />\n<br />\n<strong>Pumps Search</strong><br />\n- Clicking the Search button displays the search fields; text on button changes to Hide Search<br />\n- Clicking Hide Search hides the search fields<br />\n- On the search form, Customer, Well Lease, Well Number and Pump Number are type ahead fields<br />\n&nbsp;&nbsp;&nbsp;&nbsp; -- For Customer, retrieve type ahead results using the suggestCustomerName method.&nbsp; Pass in the currently typed text as the parameter.&nbsp; Use the results of the call to populate typeahead list.<br />\n&nbsp;&nbsp;&nbsp;&nbsp; -- For Well Lease, do the same as the above but with suggestWellLease method<br />\n&nbsp;&nbsp;&nbsp;&nbsp; -- For Well Number, use suggestWellNumber method<br />\n&nbsp;&nbsp;&nbsp;&nbsp; -- For Pump Number, use suggestPumpNumber method<br />\n- On the search form, after user enters info and clicks Search, the search results are displayed and the text on button changes to Clear Search<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- To retrieve search results, use the retrievePumps method and populate parameters according to search fields entered.<br />\n- On the search form, after user toggle the Status options, and then clicks Search, table need show up data with selected Status<br />\n- Clear Search: displays the original table or grid; search fields are still displayed; text on button changes to Hide Search<br />\n- Search result need affect Grid and List View<br />\n<br />\n<strong>1). A). Add Pump</strong><br />\n- Clicking Cancel button displays alert box;<br />\n-- Clicking Yes displays the Home-Pumps page<br />\n-- Clicking No closes the modal window<br />\n- Clicking Save displays &ldquo;B). Pumps Details&rdquo; page<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Save should use the upsertPump() function and pass in a Pump object populated based on form fields (see example JSON for new Pump).&nbsp; The function returns the same object with added properties for error and isSuccess.&nbsp; If IsSuccess is false and the error property is populated, that error should be displayed on the page either at top of form or in a modal.<br />\n- If user selects Use Pump Template, a dropdown list of templates is displayed<br />\n&nbsp;&nbsp;&nbsp;&nbsp; -- Use the results of the retrievePumpTemplates function with default inputs to populate this dropdown.&nbsp; When one is selected, use the details to prepopulate the following form.<br />\n- Selecting an option from the list displays &ldquo;a). Add Pump - Step 1&rdquo;<br />\n- If user selects Build Pump Details, &ldquo;a). Add Pump - Step 1&rdquo; is displayed<br />\n- FYI: in every steps, you need capture some selected value that will be re-use in the some of &ldquo;Add Pump&rdquo; steps<br />\n- User can go back by clicking previous step tabs</p>\n\n<p><strong>a). Add Pump - Step 1 (Pump &amp; Customer Information)</strong><br />\n- Pump Number, user can enter a number or click the generate button which displays a number in the field<br />\n- Pump Shop Location, this is dropdown<br />\n- Pump Status, If user selects Active-Deployed, then Run Date label and field are displayed<br />\n- Pump Status, if user selects Active-Stocked or Inactive, then Run Date label and field are hidden<br />\n- Need show up datepicker for Run Date field<br />\n- Customer Name, Well Lease and Well Number are type ahead fields<br />\n&nbsp;&nbsp;&nbsp;&nbsp; -- For Customer, retrieve type ahead results using the suggestCustomerName method.&nbsp; Pass in the currently typed text as the parameter.&nbsp; Use the results of the call to populate typeahead list.<br />\n&nbsp;&nbsp;&nbsp;&nbsp; -- For Well Lease, do the same as the above but with suggestWellLease method<br />\n&nbsp;&nbsp;&nbsp;&nbsp; -- For Well Number, use suggestWellNumber method<br />\n&nbsp;&nbsp;&nbsp;&nbsp; -- Both of the above methods return lists of wellResult objects.&nbsp; These objects include a well Id, a well number, and well lease string.&nbsp; Any time a Well Lease is selected from the results, ensure that Well Number and Lease are populated.&nbsp; i.e. if lease is selected, populate it and number.&nbsp; If number is selected, populate it and lease fields.&nbsp; (this means either Lease OR Number could be filled in my user and both would end up populated after selecting result)<br />\n- Next button take user to Step 2</p>\n\n<p><strong>b). Add Pump - Step 2 (Pump Detail)</strong><br />\n- Pump Brand / Pump Model : selecting the Brand will filter the options in the Model dropdown:<br />\n- If selected Pump Brand is Harbison-Fischer:<br />\n-- Model Options =&nbsp; HF API, HF 3-Tube, HF Sand-Pro, HF Texas Stripper, HF Pampa, HF Pampa Gas, HF Gas Vent, HF VSP, HF Sand Flush, HF 2SHVR, HF Gas Chaser, HF Double-Displacement, HF Large Volume, HF Stroke-Thru<br />\n- If selected Pump Brand is DON-NAN:<br />\n-- Model Options =&nbsp; DON-NAN API, DON-NAN Eco-Lift, DON-NAN Heavy-Lift, DON-NAN Big Bore, DON-NAN Sand Trey, DON-NAN Mercury Sand Stroke, DON-NAN Maximum Compression, DON-NAN Solid Sand Performance, DON-NAN Improved Hollow Tube,<br />\n- If selected Pump Brand is QUINN:<br />\n-- Model Options =&nbsp; QUINN API, QUINN Big Bore, QUINN Circle-A, QUINN Gas Compressor, QUINN Frac, QUINN Scale, QUINN Pull Down, QUINN Multiphase, QUINN Trash<br />\n- If Pump Brand is Weatherford:<br />\n-- Model Options =&nbsp; Weatherford API, Weatherford Three-Tube, Weatherford HVR, Weatherford 2SHVR, Weatherford Sand Hog, Weatherford Sandy Fluid, Weatherford Gaseous-Fluid, Weatherford Gas Pusher, Weatherford Petrol A, Weatherford Large-Volume, Weatherford Double-Production, Weatherford Steam-Bypass<br />\n- Pump Type: this is toggle options, not affect any field<br />\n- Tubing Size : when user selects option from the Other dropdown, other options in that field are deselected<br />\n- Pump Size: Create Slider bar for bootstrap, refer this sample: http://www.eyecon.ro/bootstrap-slider/<br />\n- Need numbers for every Slider bar steps<br />\n- Back button take user to Step 1<br />\n- Next button take user to Step 3</p>\n\n<p><strong>c). Add Pump - Step 3</strong><br />\n- For this screen there is a sidemenu in the left side<br />\n- Set active and inactive menu state</p>\n\n<p><strong>Barrel</strong><br />\n- Type:<br />\n-- If selected Pump Type from Step 2 is Insert:<br />\n---- Barrel Type Options = H (Heavy Wall Metal Plunger), W (Thin Wall Metal Plunger), P (Heavy Wall Soft Plunger), X (Heavy Wall Metal Plunger, Thin Wall Thread), or S (Thin Wall Soft Plunger)<br />\n---- If selected Pump Type from Step 2 is Tubing or Oversized Tubing:<br />\n-------- Barrel Type Options = H (Heavy Wall Metal Plunger) or P (Heavy Wall Soft Plunger)<br />\n- Length is a slider bar<br />\n- Metallurgy Base is a toggle option<br />\n- Metallurgy Options is a toggle option<br />\n- Upper Extension Length<br />\n-- if selected Barrel Type is X, W, or S<br />\n---- do not display Upper Extension Length label and slider in every page.<br />\n-- if selected Barrel Type is X, W, or S<br />\n---- display Upper Extension Length label and slider&nbsp; in every page.<br />\n- Lower Extension Length<br />\n-- if selected Barrel Type is X, W, or S<br />\n---- do not display Lower Extension Length label and slider&nbsp; in every page.<br />\n-- if selected Barrel Type is X, W, or S<br />\n---- display Lower Extension Length label and slider&nbsp; in every page.</p>\n\n<p><strong>Plunger</strong><br />\n- Length is a slider bar<br />\n- Fit is a slider bar<br />\n- Metallurgy Base is a toggle option<br />\n- Metallurgy Options is a toggle option</p>\n\n<p><strong>Standing Valve</strong><br />\n- This screen divided by 3 sections: &ldquo;Standing Valve&rdquo;, &ldquo;Standing Valve Ball&rdquo; and &ldquo;Standing Valve Seat&rdquo;<br />\n- Metallurgy Base is a toggle option<br />\n- Metallurgy Options is a toggle option<br />\n- Type is a toggle option<br />\n- Match title for every options</p>\n\n<p><strong>Traveling Valve</strong><br />\n- This screen divided by 3 sections: &ldquo;Traveling Valve&rdquo;, &ldquo;Traveling Valve Ball&rdquo; and &ldquo;Traveling Valve Seat&rdquo;<br />\n- Metallurgy Base is a toggle option<br />\n- Metallurgy Options is a toggle option<br />\n- Type is a toggle option<br />\n- Match title for every options</p>\n\n<p><strong>Hold Down</strong><br />\n- If selected Pump Type from Step 2 is either Tubing or Oversized Tubing: Do not display Hold Down Location<br />\n- If selected Pump Type from Step 2 is Insert &amp;&amp; selected Barrel Type is X (Heavy Wall Metal Plunger, Thin Wall Thread): Hold Down Location is disabled and option = B (Bottom) is selected<br />\n- If selected Pump Type from Step 2 is Insert &amp;&amp; Barrel Type selected Barrel Type is NOT X (Heavy Wall Metal Plunger, Thin Wall Thread): Hold Down Location is enabled and options = A (Top), B (Bottom), or T (Bottom, Traveling Barrel)</p>\n\n<p><strong>Pull Rod</strong><br />\n- If selected Pump Type from Step 2 = Tubing, do not show Pull Road section<br />\n- If selected Pump Type from Step 2 is either Insert or Oversized Tubing:<br />\n---- Metallurgy Base Values = Steel, 303/304 SS, 316 SS, Brass, Monel<br />\n---- Metallurgy Options Values =&nbsp; None, Spray Metal</p>\n\n<p><strong>Fittings</strong><br />\n- Metallurgy Base is a toggle option<br />\n- Metallurgy Options is a toggle option</p>\n\n<p><strong>Save</strong><br />\n&nbsp;&nbsp; -- Save should use the upsertPump() function and pass in a Pump object populated based on form fields (see example JSON for new Pump).&nbsp; The function returns the same object with added properties for error and isSuccess.&nbsp; If IsSuccess is false and the error property is populated, that error should be displayed on the page either at top of form or in a modal.</p>\n\n<p><strong>B). Pumps Details</strong><br />\n-The retrievePump (singular) method may be used to support deep linking and any other situation where details for a specific record need to be re-retrieved<br />\n- Back to List button take user to List displays Home-Pumps<br />\n- Delete button need displays alert<br />\n-- No, Cancel closes the modal window<br />\n-- Yes, Delete displays Home-Pumps<br />\n-- Save as Pump Template now displays the &ldquo;a). Pump Template Details Edit&rdquo; screen.&nbsp; This should take users to the Pump Template tab and pass a pumpId in the URL that can be used to prepopulate Pump Template details.&nbsp; See additional requirements in Pump Template section of this document.<br />\n- Add Pump Repair button displays a confirmation modal before allowing user to proceed<br />\n- No, Cancel button need hide the modal<br />\n- Yes, Continue button take user to Add<br />\n- When Generate button is used to create a new Pump Number, use the generatePumpNumber() function<br />\n- Edit button take user to editable screen &ldquo;a). Pumps Details Edit&rdquo;<br />\n- Show tabs functions for: &ldquo;Pump &amp; Customer Information&rdquo;, &ldquo;Pump &amp; Component Details&rdquo; and &ldquo;Pump Repairs&rdquo;<br />\n- Pumps Status show up in the right side of tab<br />\n- Clicking the Save as Pump Template button displays the Pump Template Details page<br />\n&nbsp;&nbsp;&nbsp;&nbsp; -- Save should use the upsertPump() function and pass in a Pump object populated based on form fields (see example JSON for new Pump).&nbsp; The function returns the same object with added properties for error and isSuccess.&nbsp; If IsSuccess is false and the error property is populated, that error should be displayed on the page either at top of form or in a modal.</p>\n\n<p><strong>Pump &amp; Customer Information Tab</strong><br />\n- Show label and value in separated rows</p>\n\n<p><strong>Pump &amp; Component Details Tab</strong><br />\n- Show label and value in separated rows for Pump Details<br />\n- Show table content for Component Details<br />\n<br />\n<strong>Pump Repair Tab</strong><br />\n- This tab contains table format<br />\n- Clicking a Pump Repair number :<br />\n--&nbsp; if status = Open, display &ldquo;3). B). Pump Repair Details - Open&rdquo;<br />\n--&nbsp; if status = Closed, display &ldquo;3). C). Pump Repair Details - Closed&rdquo;</p>\n\n<p><strong>a). Pumps Details Edit</strong><br />\n- Clicking Cancel button displays alert box;<br />\n--&nbsp; Clicking Yes displays the Pumps Details page<br />\n--&nbsp; Clicking No closes the modal window<br />\n- Clicking Save displays Pumps Details page<br />\n- Pump Repair Tab title changed into &ldquo;Component Details&rdquo; tab</p>\n\n<p>Pump &amp; Customer Information Tab<br />\n- See &ldquo;a). Add Pump - Step 1&rdquo; for field functionality</p>\n\n<p>Pump Details Tab<br />\n- See &ldquo;a). Add Pump - Step 2&rdquo; for field functionality<br />\n<br />\nComponent Details Tab<br />\n- See &ldquo;a). Add Pump - Step 3&rdquo; for field functionality</p>\n\n<p><strong>2). Templates</strong><br />\n- Recently Viewed, Recently Created, Recently Modified are links similar to on pumps screen.&nbsp; However, use the retrievePumpTemplates method to obtain results to populate details.<br />\n- Search button displays search fields<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Once details are provided, use the retrievePumpTemplates method to obtain filtered results.<br />\n- Add Pump Template button displays &ldquo;a). Add Pump Template Step 1&rdquo;</p>\n\n<p><strong>Pump Template Table</strong><br />\n- Clicking on a column sorts the table by that column<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- SImilar to Pumps tab, use the retrievePumpTemplates method with the sort parameters to allow sorting results<br />\n- Clicking on Template Name displays the &ldquo;2). B). Pump Template Details&rdquo; page<br />\n- Customer cell should be a link to &ldquo;/{{pump.customerId}}&rdquo; (within current window)<br />\n- Page numbering should be calculated using the pumpsCount, pageSize, and pageNumber parameters.</p>\n\n<p><strong>Pump Template Search</strong><br />\n- clicking the Search button displays the search fields; text on button changes to Hide Search<br />\n- clicking Hide Search hides the search fields<br />\n- on the search form, Template Name and Customer are type ahead fields<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- These typeaheads should function the same as in the Pumps tab above<br />\n- on the search form, after user enters info and clicks Search, the search results are displayed and the text on button changes to Clear Search<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- The retrievePumpTemplates method should be used to complete this.<br />\n- Clear Search: displays the original table; search fields are still displayed; text on button changes to Hide Search</p>\n\n<p><strong>2). A). Add Pump Template</strong></p>\n\n<p>a). Add Pump Template Step 1 (Template Name)<br />\n- Template name is a text field<br />\n- Next button take user to Next Step<br />\n<br />\nb). Add Pump Template Step 2 (Pump &amp; Customer Information)<br />\n- Pump Shop Location is a dropdown<br />\n- Customer Name, Well Lease and Well Number are type ahead fields<br />\n--&nbsp; User must select from the type ahead list for Customer and Well Lease<br />\n--&nbsp; User is allowed to add a new number to Well Number field<br />\n<br />\nc). Add Pump Template Step 3 (Pump Details)<br />\n- See &ldquo;b). Add Pump - Step 2&rdquo; for field functionality<br />\n<br />\nd). Add Pump Template Step 4 (Component Details)<br />\n- See &ldquo;b). Add Pump - Step 3&rdquo; for field functionality</p>\n\n<p>Save Pump Template Details<br />\n- Use the upsertPumpTemplate method to ensure details are successfully updated<br />\n<br />\n<strong>2). B). Pump Template Details</strong><br />\n- Back to List take user back to Pump Templates page<br />\n- Delete displays modal window<br />\n-- Yes, Delete displays Pump Templates page<br />\n-- No, Cancel closes the modal window<br />\n- Edit displays &ldquo;a). Pump Template Details Edit&rdquo;<br />\n-- retrievePumpTemplate (singular) function may be used to retrieve specific details if needed.</p>\n\n<p>Pump &amp; Customer Tab<br />\n- Show label and value in separated rows</p>\n\n<p>Pump Details Tab<br />\n- Show label and value in separated rows</p>\n\n<p>Component Details Tab<br />\n- Show table content for Component Details<br />\n<br />\n<strong>a). Pump Template Details Edit</strong><br />\n- Cancel displays modal window<br />\n-- Yes, Cancel displays Pump Template Details page<br />\n-- No, Continue closes the modal window<br />\n- Save displays Pump Template Details page</p>\n\n<p>Pump &amp; Customer Tab<br />\n- See &ldquo;Add PumpTemplate-Step2&rdquo; for field functionality</p>\n\n<p>Pump Details Tab<br />\n- See &ldquo;Add Pump - Step 2&rdquo; for field functionality</p>\n\n<p>Component Details Tab<br />\n- See &ldquo;Add Pump - Step 3&rdquo; for field functionality</p>\n\n<p><strong>3). Pump Repairs</strong><br />\n- Recently Viewed, Recently Created, Recently Modified are links similar to on pumps screen.&nbsp; However, use the retrievePumpRepairs method to obtain results to populate details.<br />\n- Search button displays search fields</p>\n\n<p>Pump Repair Table<br />\n- Clicking on a column sorts the table by that column (use retrievePumpRepairs method similar to other tabs)<br />\n- Clicking a Pump Repair number :<br />\n--&nbsp; if status = Open, display &ldquo;3). B). Pump Repair Details - Open&rdquo;<br />\n--&nbsp; if status = Closed, display &ldquo;3). C). Pump Repair Details - Closed&rdquo;<br />\n- Pump Number take user to Pump Details page<br />\n- Customer is a dummy link; just show the mouseover on the prototype<br />\n- Page numbering is a placeholder</p>\n\n<p>Pump Repair Search<br />\n- Clicking the Search button displays the search fields; text on button changes to Hide Search<br />\n- Clicking Hide Search hides the search fields<br />\n- On the search form, Customer, Well Lease, Well Number and Pump Number are type ahead fields<br />\n- On the search form, after user enters info and clicks Search, the search results are displayed and the text on button changes to Clear Search<br />\n- Clear Search: displays the original table; search fields are still displayed; text on button changes to Hide Search</p>\n\n<p><strong>3). A). Add Pump Repair</strong><br />\n- Clicking Cancel displays modal window<br />\n--&nbsp; Yes, Cancel displays &ldquo;3). Pump Repairs&rdquo; page<br />\n--&nbsp; No, Continue closes the modal window<br />\n- Clicking Save displays &ldquo;Pump Repair Details - Open&rdquo; page</p>\n\n<p>Pump Repair Details<br />\n- Edit displays Pump Repair Edit page<br />\n- Delete displays modal window<br />\n--&nbsp; No, Cancel closes modal window<br />\n--&nbsp; Yes, Delete displays Pump Repairs Page<br />\n<br />\na). Add Pump Repair Step 1 (Received Pump Details Tab)<br />\n- Received Pump Details is read only<br />\n- Received Pump Component Details table is read only</p>\n\n<p>a). Add Pump Repair Step 2 (Pump Information Tab)<br />\n- Customer Name, Pump Number, Well Lease, Well Number and are type ahead fields<br />\n- Run Date and Fail Date are Datepicker<br />\n<br />\nb). Add Pump Repair Step 3 (Pump Details &amp; Evaluation Tab)<br />\n- See &ldquo;c). Add Pump Template Step 3&rdquo; for field functionality<br />\n- Pull Reason in toggle options<br />\n- Foreign Material in toggle options<br />\n- Notes / Remarks is textarea<br />\n<br />\nc). Add Pump Repair Step 4 (Component Evaluation Tab)<br />\n- For each component under this section<br />\n--&nbsp; Clicking YES for Replaced? displays attribute fields for that component<br />\n--&nbsp; Clicking NO for Replaced? hides attribute fields if they are visible<br />\n- Notice there&rsquo;s Photo Attachment field for every menu</p>\n\n<p>d). Add Pump Repair Step 5 (Pump Repair Disposition Evaluation Tab)<br />\n- Pull Reason in toggle options<br />\n- Notes/Remarks is text input</p>\n\n<p><strong>3). B). Pump Repair Details - Open</strong><br />\n- Back button take user to Pump Details List<br />\n- This is screen for Pump Repair Details with &ldquo;Open&rdquo; Status<br />\n- Delete button need show confirmation button<br />\n- Edit button take user to Edit screen<br />\n- Close Pump Repair placed in the right side<br />\n-- Clicking the button displays confirmation modal<br />\n-- if click Yes, Continue, display Pump Repair - closed page<br />\n<br />\nReceived Pump Detail Tab<br />\n- Show label and value in separated rows<br />\n- Show table in the bottom</p>\n\n<p>Pump Information Tab<br />\n- Show label and value in separated rows</p>\n\n<p>Pump Details &amp; Evaluation Tab<br />\n- Show label and value in separated rows</p>\n\n<p>Component Evaluation Tab<br />\n- Show menu navigation in the left side<br />\n- Show label and value in separated rows<br />\n- Also there&rsquo;s field for photo attachment</p>\n\n<p>Pump Repair Disposition Tab<br />\n- Show Pump Status and Notes<br />\n<br />\n<strong>a). Pump Repairs Edit</strong><br />\n- Cancel displays modal window<br />\n--&nbsp; Yes, Cancel displays &ldquo;3). B). Pump Repair Details - Open&rdquo; page<br />\n--&nbsp; No, Continue closes modal window<br />\n- Save displays Pump Repair Details - Open page</p>\n\n<p>Received Pump Detail Tab<br />\n- Show label and value in separated rows<br />\n- Show table in the bottom</p>\n\n<p>Pump Information Tab<br />\n- Only Pump Information section editable</p>\n\n<p>Pump Details &amp; Evaluation Tab<br />\n- See &ldquo;Add Pump Step 2&rdquo; for field functionality<br />\n-&nbsp; See &ldquo;Add Pump Repair - Step 3&rdquo; for field functionality</p>\n\n<p>Component Evaluation Tab<br />\n- For each component under this section<br />\n-- Clicking YES for Replaced? displays attribute fields for that component<br />\n-- Clicking NO for Replaced? hides attribute fields if they are visible</p>\n\n<p>Disposition Tab<br />\n- For Pump Status:<br />\n-- if Active-Deployed is selected, show New Run Date field<br />\n--&nbsp; if Active-Stocked OR Inactive is selected, show Replacement Pump Used? Y/N<br />\n---- if Yes is selected, show Replacement Pump field - type ahead showing pump numbers and show New Run Date field<br />\n----- if No is selected, do not show any additional fields<br />\n- New Run Date is Datepicker<br />\n- Notes is input field<br />\n<br />\n<strong>3). C). Pump Repair Details - Closed</strong><br />\n- Basically this is same screen like &ldquo;Pump Repair Details - Open&rdquo; page<br />\n- Need show different status color<br />\n- There&rsquo;s &ldquo;Pump Tag&rdquo; and &ldquo;Work Summary&rdquo; button in the right side<br />\n&nbsp;<br />\n<strong>a). Pump Repairs Edit</strong><br />\n- Basically this is same screen like &ldquo;Pump Repair Details - Open&rdquo; page<br />\n- Show different content<br />\n<br />\n<strong>Client Priorities (The items that are considered highest prototype priorities)</strong><br />\n- Creating quality and efficient HTML/CSS3 code that works in all the requested browsers.<br />\n- All elements should be Pixel Precisions, pay attention to padding, margin, line-height, etc.<br />\n- Matching the storyboards (as close as possible) across the required browsers.<br />\n- Minimize effort to update in future.&nbsp; If using angular, isolate views to templates/partials when possible.</p>\n\n<p><br />\n<strong>CODE REQUIREMENTS:</strong><br />\n<strong>JS Data Functions</strong><br />\nThe following functions should be defined in a service class.&nbsp; They should return data using the structures defined further below:<br />\n&nbsp; retrievePumps(pumpNumber,wellLease,wellNumber,customer,status,pageNumber,pageSize,sortColumn,sortDescending) {<br />\n&nbsp;&nbsp;&nbsp; returns object with property for pumps array + size property<br />\n&nbsp;&nbsp;&nbsp; providing null for inputs results in defaults<br />\n&nbsp;&nbsp;&nbsp; adjust pageNumber to pull subsequent pages<br />\n&nbsp;&nbsp;&nbsp; use pageNumber + pageSize + record count to generate pagination<br />\n}</p>\n\n<p>generatePumpNumber() {<br />\n&nbsp;&nbsp;&nbsp; returns a new valid pump number<br />\n}<br />\n&nbsp;&nbsp; &nbsp;<br />\nupsertPump(Pump p) {<br />\n&nbsp;&nbsp;&nbsp; creates a new pump / updates an existing one based on provided data<br />\n&nbsp;&nbsp;&nbsp; returns pump object + error property<br />\n}</p>\n\n<p>retrievePump(pumpId) {<br />\n&nbsp;&nbsp;&nbsp; returns single pump object based on Id<br />\n}</p>\n\n<p>suggestCustomerName(String searchText) {<br />\n&nbsp;&nbsp;&nbsp; returns list of customers based on search string<br />\n}</p>\n\n<p>suggestWellLease(String searchText) {<br />\n&nbsp;&nbsp;&nbsp; returns a list of well leases based on search string<br />\n}</p>\n\n<p>suggestWellNumber(String searchText) {<br />\n&nbsp;&nbsp;&nbsp; returns a list of well numbers based on search string<br />\n}</p>\n\n<p>suggestPumpNumber(String searchText) {<br />\n&nbsp;&nbsp;&nbsp; returns a list of pump numbers based on search string<br />\n}</p>\n\n<p>retrievePumpTemplates(templateName,brand,model,customer,dateCreated, pageNumber,pageSize,sortColumn,sortDescending) {<br />\n&nbsp;&nbsp;&nbsp; returns a list of pump templates<br />\n}</p>\n\n<p>retrievePumpTemplate(Id templateId) {<br />\n&nbsp;&nbsp;&nbsp; returns a single Pump Template object based on Id<br />\n}</p>\n\n<p>upsertPumpTemplate(PumpTemplate pt) {<br />\n&nbsp;&nbsp;&nbsp; creates a new pump templates / updates an existing one based on provided data<br />\n&nbsp;&nbsp;&nbsp; returns pump object + error property<br />\n}</p>\n\n<p>retrievePumpRepairs(customer,wellLease,wellNumber,pumpNumber,status, pageNumber,pageSize,sortColumn,sortDescending) {<br />\n&nbsp;&nbsp;&nbsp; returns a list of pump repairs<br />\n}</p>\n\n<p>retrievePumpRepair(Id repairId) {<br />\n&nbsp;&nbsp;&nbsp; returns a single pump repair details object based on Id<br />\n}</p>\n\n<p>upsertPumpRepair(PumpRepair pr) {<br />\n&nbsp;&nbsp;&nbsp; creates a new pump repair / updates an existing one based on provided data<br />\n&nbsp;&nbsp;&nbsp; returns a pump repair object + error property<br />\n}</p>\n\n<p><strong>JSON Structure Files:</strong><br />\nPump.json - returned from searches on pumps<br />\nNewPump.json - represents format that should be passed in to upsertPump when created a new pump<br />\nUpdatePump.json - represent format that should be passed in to upsertPump when updating an existing pump<br />\nErrorNewPump.json - represents the format returned when a save for a pump is unsuccessful<br />\nPumpNumber.json - represents results of generatePumpNumber call<br />\nPump.json - represents results of retrievePump call when passed a valid Id<br />\nCustomerResult.json - represents the search results returned when using customer type ahead<br />\nWellResult.json - represents the search results returned when using Well Lease or Well Number type ahead<br />\nPumpResult.json - represents the search results returned when using Pump Number type ahead<br />\nPumpTemplates.json - returned from searches on Pump Templates<br />\nPumpTemplate.json - returned from retrievePumpTemplate when passed a valid Id<br />\nNewPumpTemplate.json - should be passed to upsertPumpTemplate function when creating a new PumpTemplate<br />\nUpdatePumpTemplate.json - should be passed to upsertPumpTemplate function when updating<br />\nErrorPumpTemplate.json - returned from upsertPumpTemplate when invalid data is provided<br />\nPumpRepairs.json - returned from retrievePumpRepairs function<br />\nPumpRepair.json - returned from retrievePumpRepair when passed a valid Id<br />\nErrorPumpRepair.json - returned from upsertPumpRepairs method when invalid data is passed<br />\nNewPumpRepair.json - should be provided to upsertPumpRepairs method when creating a new PumpRepair<br />\nUpdatePumpRepair.json - should be provided to upsertPumpRepairs method when updating an existing PumpRepair</p>\n\n<p><strong>HTML5</strong><br />\n- Provide comments on the page elements to give clear explanation of the code usage. The goal is to help future developers understand the code.<br />\n- Please use clean INDENTATION for all HTML code so future developers can follow the code.<br />\n- All HTML code naming should not have any conflicts or errors.<br />\n- You&rsquo;re encouraged to use HAML to make the HTML code clean, provide source files on your submission.<br />\n- ALL tags must be properly closed/self-closing.&nbsp; This includes meta,img, and link tags which are often left unclosed.<br />\n<br />\n<strong>CSS</strong><br />\n- Provide comments on the CSS code. We need CSS comments to give a clear explanation of the code usage. The goal is to help future developers understand the code.<br />\n- Please use clean INDENTATION for all CSS so developers can follow the code.<br />\n- All CSS naming should not have any conflicts.<br />\n- As possible use CSS3 style when create all styling.</p>\n\n<p><strong>Javascript</strong><br />\n- All JavaScript must not have a copyright by a third party.<br />\n- You are encouraged to use your own scripts, or scripts that are free, publicly available and do not have copyright statements or author recognition requirements anywhere in the code.<br />\n- Make sure you use open source library<br />\n- Preferred version of AngularJS is 1.4<br />\n- All angularJS services/controller/modules should be included in the associated page&rsquo;s body.&nbsp; This structure is due to our target server&rsquo;s requirements.&nbsp; The provided template is already arranged like this and if built upon as is, you should have no trouble.</p>\n\n<p><strong>Images</strong><br />\n- Images should be properly compressed while still having good visual quality.<br />\n- Please use best practice repetition usage of background based image.</p>\n\n<p><strong>Browsers Requirements</strong><br />\n- Safari Latest Version<br />\n- Firefox Latest Version<br />\n- Chrome Latest Version<br />\n- IE 10</p>\n",
  "forumId": 30654,
  "forumLink": "http://apps.topcoder.com/forums/?module=Category&categoryID=30654",
  "numberOfCheckpointSubmissions": 0,
  "numberOfCheckpointsPrizes": 0,
  "numberOfRegistrants": 22,
  "numberOfSubmissions": 2,
  "phases": [
    {
      "type": "Specification Submission",
      "status": "Closed",
      "scheduledStartTime": "2015-10-29T03:49:00.000Z",
      "actualStartTime": "2015-10-29T03:49:00.000Z",
      "scheduledEndTime": "2015-10-29T03:51:00.000Z",
      "actualendTime": "2015-10-29T03:51:00.000Z",
      "_id": "58132933550dfb3b52b5fd1e"
    },
    {
      "type": "Specification Review",
      "status": "Closed",
      "scheduledStartTime": "2015-10-29T03:51:00.000Z",
      "actualStartTime": "2015-10-29T03:51:00.000Z",
      "scheduledEndTime": "2015-10-29T06:23:00.000Z",
      "actualendTime": "2015-10-29T06:23:00.000Z",
      "_id": "58132933550dfb3b52b5fd1d"
    },
    {
      "type": "Registration",
      "status": "Closed",
      "scheduledStartTime": "2015-10-29T06:23:00.000Z",
      "actualStartTime": "2015-10-29T06:23:00.000Z",
      "scheduledEndTime": "2015-10-31T06:23:00.000Z",
      "actualendTime": "2015-10-31T06:23:00.000Z",
      "_id": "58132933550dfb3b52b5fd1c"
    },
    {
      "type": "Submission",
      "status": "Closed",
      "scheduledStartTime": "2015-10-29T06:28:00.000Z",
      "actualStartTime": "2015-10-29T06:28:00.000Z",
      "scheduledEndTime": "2015-11-09T13:24:00.000Z",
      "actualendTime": "2015-11-09T13:24:00.000Z",
      "_id": "58132933550dfb3b52b5fd1b"
    },
    {
      "type": "Screening",
      "status": "Closed",
      "scheduledStartTime": "2015-11-09T13:24:00.000Z",
      "actualStartTime": "2015-11-09T13:24:00.000Z",
      "scheduledEndTime": "2015-11-09T18:57:00.000Z",
      "actualendTime": "2015-11-09T18:57:00.000Z",
      "_id": "58132933550dfb3b52b5fd1a"
    },
    {
      "type": "Review",
      "status": "Closed",
      "scheduledStartTime": "2015-11-09T18:57:00.000Z",
      "actualStartTime": "2015-11-09T18:57:00.000Z",
      "scheduledEndTime": "2015-11-11T13:50:00.000Z",
      "actualendTime": "2015-11-11T13:50:00.000Z",
      "_id": "58132933550dfb3b52b5fd19"
    },
    {
      "type": "Appeals",
      "status": "Closed",
      "scheduledStartTime": "2015-11-11T13:50:00.000Z",
      "actualStartTime": "2015-11-11T13:50:00.000Z",
      "scheduledEndTime": "2015-11-12T13:51:00.000Z",
      "actualendTime": "2015-11-12T13:51:00.000Z",
      "_id": "58132933550dfb3b52b5fd18"
    },
    {
      "type": "Appeals Response",
      "status": "Closed",
      "scheduledStartTime": "2015-11-12T13:51:00.000Z",
      "actualStartTime": "2015-11-12T13:51:00.000Z",
      "scheduledEndTime": "2015-11-12T18:31:00.000Z",
      "actualendTime": "2015-11-12T18:31:00.000Z",
      "_id": "58132933550dfb3b52b5fd17"
    },
    {
      "type": "Aggregation",
      "status": "Closed",
      "scheduledStartTime": "2015-11-12T18:32:00.000Z",
      "actualStartTime": "2015-11-12T18:32:00.000Z",
      "scheduledEndTime": "2015-11-12T19:23:00.000Z",
      "actualendTime": "2015-11-12T19:23:00.000Z",
      "_id": "58132933550dfb3b52b5fd16"
    },
    {
      "type": "Final Fix",
      "status": "Closed",
      "scheduledStartTime": "2015-11-12T19:23:00.000Z",
      "actualStartTime": "2015-11-12T19:23:00.000Z",
      "scheduledEndTime": "2015-11-15T10:50:00.000Z",
      "actualendTime": "2015-11-15T10:50:00.000Z",
      "_id": "58132933550dfb3b52b5fd15"
    },
    {
      "type": "Final Review",
      "status": "Closed",
      "scheduledStartTime": "2015-11-15T10:50:00.000Z",
      "actualStartTime": "2015-11-15T10:50:00.000Z",
      "scheduledEndTime": "2015-11-15T13:08:00.000Z",
      "actualendTime": "2015-11-15T13:08:00.000Z",
      "_id": "58132933550dfb3b52b5fd14"
    },
    {
      "type": "Approval",
      "status": "Closed",
      "scheduledStartTime": "2015-11-15T17:42:00.000Z",
      "actualStartTime": "2015-11-15T17:42:00.000Z",
      "scheduledEndTime": "2015-11-18T02:57:00.000Z",
      "actualendTime": "2015-11-18T02:57:00.000Z",
      "_id": "58132933550dfb3b52b5fd13"
    },
    {
      "type": "Final Fix",
      "status": "Closed",
      "scheduledStartTime": "2015-11-15T13:09:00.000Z",
      "actualStartTime": "2015-11-15T13:09:00.000Z",
      "scheduledEndTime": "2015-11-15T17:18:00.000Z",
      "actualendTime": "2015-11-15T17:18:00.000Z",
      "_id": "58132933550dfb3b52b5fd12"
    },
    {
      "type": "Final Review",
      "status": "Closed",
      "scheduledStartTime": "2015-11-15T17:18:00.000Z",
      "actualStartTime": "2015-11-15T17:18:00.000Z",
      "scheduledEndTime": "2015-11-15T17:42:00.000Z",
      "actualendTime": "2015-11-15T17:42:00.000Z",
      "_id": "58132933550dfb3b52b5fd11"
    }
  ],
  "platforms": [
    "HTML"
  ],
  "postingDate": "2015-10-29T06:23:00.000Z",
  "prize": [
    1800,
    900
  ],
  "projectId": 9127,
  "registrants": [
    {
      "handle": "moulyg",
      "reliability": "93%",
      "registrationDate": "2015-10-29T06:39:00.000Z",
      "submissionDate": null,
      "rating": "1614",
      "colorStyle": "color: #DDCC00",
      "_id": "58132933550dfb3b52b5fd10"
    },
    {
      "handle": "krisjen",
      "reliability": "n/a",
      "registrationDate": "2015-10-29T06:50:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58132933550dfb3b52b5fd0f"
    },
    {
      "handle": "alfiya_Zi",
      "reliability": "n/a",
      "registrationDate": "2015-10-29T06:56:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58132933550dfb3b52b5fd0e"
    },
    {
      "handle": "savon_cn",
      "reliability": "n/a",
      "registrationDate": "2015-10-29T08:14:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58132933550dfb3b52b5fd0d"
    },
    {
      "handle": "topcodder02",
      "reliability": "n/a",
      "registrationDate": "2015-10-29T09:50:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58132933550dfb3b52b5fd0c"
    },
    {
      "handle": "PeterBest",
      "reliability": "n/a",
      "registrationDate": "2015-10-29T11:59:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58132933550dfb3b52b5fd0b"
    },
    {
      "handle": "mulish",
      "reliability": "n/a",
      "registrationDate": "2015-10-29T12:08:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58132933550dfb3b52b5fd0a"
    },
    {
      "handle": "blu3fox",
      "reliability": "n/a",
      "registrationDate": "2015-10-29T13:20:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58132933550dfb3b52b5fd09"
    },
    {
      "handle": "f0rc0d3r",
      "reliability": "n/a",
      "registrationDate": "2015-10-29T13:20:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58132933550dfb3b52b5fd08"
    },
    {
      "handle": "sunbinbrother",
      "reliability": "n/a",
      "registrationDate": "2015-10-29T15:39:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58132933550dfb3b52b5fd07"
    },
    {
      "handle": "kcchiu",
      "reliability": "6%",
      "registrationDate": "2015-10-29T15:43:00.000Z",
      "submissionDate": null,
      "rating": "1046",
      "colorStyle": "color: #00A900",
      "_id": "58132933550dfb3b52b5fd06"
    },
    {
      "handle": "sachin91",
      "reliability": "n/a",
      "registrationDate": "2015-10-29T17:31:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58132933550dfb3b52b5fd05"
    },
    {
      "handle": "Rahul.A",
      "reliability": "n/a",
      "registrationDate": "2015-10-29T18:27:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58132933550dfb3b52b5fd04"
    },
    {
      "handle": "son4moon",
      "reliability": "n/a",
      "registrationDate": "2015-10-29T18:42:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58132933550dfb3b52b5fd03"
    },
    {
      "handle": "Luckyodell",
      "reliability": "n/a",
      "registrationDate": "2015-10-29T21:39:00.000Z",
      "submissionDate": "2015-11-09T13:20:00.000Z",
      "rating": "258",
      "colorStyle": "color: #999999",
      "_id": "58132933550dfb3b52b5fd02"
    },
    {
      "handle": "codingdrone",
      "reliability": "n/a",
      "registrationDate": "2015-10-30T02:10:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58132933550dfb3b52b5fd01"
    },
    {
      "handle": "FArIZzX77",
      "reliability": "n/a",
      "registrationDate": "2015-10-30T07:05:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58132933550dfb3b52b5fd00"
    },
    {
      "handle": "Schpotsky",
      "reliability": "n/a",
      "registrationDate": "2015-10-30T09:03:00.000Z",
      "submissionDate": null,
      "rating": null,
      "colorStyle": "color: #000000",
      "_id": "58132933550dfb3b52b5fcff"
    },
    {
      "handle": "besabestin",
      "reliability": "40%",
      "registrationDate": "2015-10-30T16:33:00.000Z",
      "submissionDate": null,
      "rating": "1062",
      "colorStyle": "color: #00A900",
      "_id": "58132933550dfb3b52b5fcfe"
    },
    {
      "handle": "YiiBryan",
      "reliability": "0%",
      "registrationDate": "2015-10-30T16:57:00.000Z",
      "submissionDate": "2015-11-09T12:43:00.000Z",
      "rating": "1039",
      "colorStyle": "color: #00A900",
      "_id": "58132933550dfb3b52b5fcfd"
    },
    {
      "handle": "nghi85",
      "reliability": "33%",
      "registrationDate": "2015-10-30T22:17:00.000Z",
      "submissionDate": null,
      "rating": "923",
      "colorStyle": "color: #00A900",
      "_id": "58132933550dfb3b52b5fcfc"
    },
    {
      "handle": "googlesmkm",
      "reliability": "6%",
      "registrationDate": "2015-10-31T03:44:00.000Z",
      "submissionDate": null,
      "rating": "1273",
      "colorStyle": "color: #6666FF",
      "_id": "58132933550dfb3b52b5fcfb"
    }
  ],
  "registrationEndDate": "2015-10-31T06:23:00.000Z",
  "reliabilityBonus": 360,
  "reviewScorecardId": 30001571,
  "reviewType": "COMMUNITY",
  "screeningScorecardId": 30000591,
  "submissionEndDate": "2015-11-09T13:24:00.000Z",
  "submissions": [
    {
      "handle": "YiiBryan",
      "placement": 1,
      "screeningScore": 100,
      "initialScore": 73.33,
      "finalScore": 84.17,
      "points": 0,
      "submissionStatus": "Active",
      "submissionDate": "2015-11-09T12:43:00.000Z",
      "_id": "58132933550dfb3b52b5fd20"
    },
    {
      "handle": "Luckyodell",
      "placement": 2,
      "screeningScore": 100,
      "initialScore": 47.83,
      "finalScore": 47.83,
      "points": 0,
      "submissionStatus": "Failed Review",
      "submissionDate": "2015-11-09T13:20:00.000Z",
      "_id": "58132933550dfb3b52b5fd1f"
    }
  ],
  "technology": [
    "CSS",
    "HTML5",
    "JSON",
    "JavaScript"
  ]
}